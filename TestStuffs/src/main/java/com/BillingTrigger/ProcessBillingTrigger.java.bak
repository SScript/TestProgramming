package com.BillingTrigger;

import org.json.JSONArray;
import org.json.JSONObject;


public class ProcessBillingTrigger  {
    public Resp ProcessJsonData(String jsonDataStr, String excludeStrs, String containsOrEquals, String caller) throws Exception {
        Resp result = new Resp();
        Resp resultOld = new Resp();
        JSONObject orderdatafull;
        JSONObject orderdata;

        orderdatafull = new JSONObject(jsonDataStr);
        // skatamies vai vaig pa jaunam -> ja wave = 3; savâdâk pa vecam
        int wave = 2;
        try {
            wave = orderdatafull.getInt("Wave");
        } catch (Exception e) {
            wave = 2;
        }


        // pa jaunam
        if (wave == 3) {

        } else {
            // pavecam

        }


        try {
            orderdata = orderdatafull.getJSONObject("Order");
        } catch (Exception e) {
            //throw new Exception("Field " + field + " is mandatory");
            result.RetCode = "SOA_164[005]";
            result.RetMsg = "Nav padota \"Order\" daïa.";
            result.responseVlocJson = formatDefaultResponseToSF(jsonDataStr, e);
            return result;
        }

        String orderedService = "Split payment";
        try {
            orderedService = orderdata.getString("OrderedService");
            result.OrderedServiceOrigin = orderedService;
        } catch (Exception e) {
            orderedService = "Split payment";
            result.OrderedServiceOrigin = "";
        }

        //orderedService = "telco";
        ProcessJson b4 = new ProcessJson();
        String env = "LOCAL";
        System.out.println("orderedService: " + orderedService);
        switch (orderedService.toUpperCase()) {
            case "TELCO":
                try {
                    ProcessTelco pt = new ProcessTelco(jsonDataStr, env);
                    result = pt.ProcessForTelco();
                    System.out.println("--> SendJsonStr1: " + result.SendJsonStr1);
                    System.out.println("--> SendJsonStr2: " + result.SendJsonStr2);
                    System.out.println("--> SendJsonStr3: " + result.SendJsonStr3);
                    System.out.println("--> SendJsonStr4: " + result.SendJsonStr4);
                    System.out.println("--> responseVlocJson: " + result.responseVlocJson);
                } catch (Exception e) {
                    System.out.println("TELCO error");
                    result.responseVlocJson = formatDefaultResponseToSF(jsonDataStr, e);
                    result.RetMsg = e.getMessage();
                    result.RetCode = "SOA_164[005]";
                }
                break;
            case "ELECTRICITY":
                // jaunais
                //System.out.println("Pa jaunam:");
                //ProcessElectricity pe = new ProcessElectricity(jsonDataStr, env);
                //result = pe.ProcessForElectricity();
                //System.out.println("--> SendJsonStr: " + result.SendJsonStr);

                // pa vecam
                System.out.println("Pa vecam:");
                resultOld = b4.ProcessJsonData(jsonDataStr);
                System.out.println("--> SendJsonStr: " + resultOld.SendJsonStr);
                break;
            default:// Split payment
                // jaunais
                //ProcessSplitPayment ps = new ProcessSplitPayment(jsonDataStr, excludeStrs, containsOrEquals, env);
                //result = ps.ProcessForSplitPayment();
                //System.out.println("--> SendJsonStr: " + result.SendJsonStr);

                // pa vecam
                resultOld = b4.ProcessJsonData(jsonDataStr);
                System.out.println("--> SendJsonStr: " + resultOld.SendJsonStr);
                break;
        }
        return result;
    }

    private String formatDefaultResponseToSF(String jsonDataStr, Exception e) throws Exception {
        JSONObject order = new JSONObject();
        JSONArray orderItems = new JSONArray();
        JSONObject orderdatafull = new JSONObject(jsonDataStr);
        JSONObject orderdata = null;
        JSONObject rowdata = null;

        try {
            orderdata = orderdatafull.getJSONObject("Order");
            orderItems = orderdata.getJSONArray("OrderItems");

            for (int i = 0; orderItems.length() < 4; i++) {
                //for (int i = 0; i < orderdataitems.length(); i++) {
                rowdata = orderItems.getJSONObject(i);
                String prdSubType = GetJsonObjectStringValue(rowdata, "ProductSubType", false);
                if (!prdSubType.equalsIgnoreCase("Offer")) {
                    continue;
                }
                orderItems.put(new JSONObject()
                        .put("OrderItemID", GetJsonObjectStringValue(rowdata, "OrderItemId", false))
                        //.put("OrderItemID", "")
                        .put("ServiceNumber", "")
                        .put("BillActivationDate", "")
                        .put("ServiceActivationDate", "")
                        .put("Status", "")
                        .put("Description", "Datu validâcijas kïûda. Ir nepiecieðama manuâla norçíinu aktivizâcija.")
                        .put("ErrorCode", "SOA_164[005]")
                        .put("GroupId", "1"));
            }

            order.put("OrderId", GetJsonObjectStringValue(orderdata, "OrderId", false));
            order.put("OrderNumber", GetJsonObjectStringValue(orderdata, "OrderNumber", false));
            order.put("Status", "Billing Activation Failed");
            order.put("BillActivationDate", GetJsonObjectStringValue(orderdata, "OrderDate", false));
            order.put("Description", "Datu validâcijas kïûda. Ir nepiecieðama manuâla norçíinu aktivizâcija.");
            order.put("ErrorCode", "SOA_164[005]");
            order.put("GroupId", "");
            order.put("OrderItem", orderItems);
        } catch (Exception ex) {
            // global kautkâda kïûda
            orderItems.put(new JSONObject()
                    .put("OrderItemID", "")
                    .put("ServiceNumber", "")
                    .put("BillActivationDate", "")
                    .put("ServiceActivationDate", "")
                    .put("Status", "")
                    .put("Description", "Datu validâcijas kïûda. Ir nepiecieðama manuâla norçíinu aktivizâcija.")
                    .put("ErrorCode", "SOA_164[005]")
                    .put("GroupId", "1"));

            order.put("OrderId", "");
            order.put("OrderNumber", "");
            order.put("Status", "Billing Activation Failed");
            order.put("BillActivationDate", "");
            order.put("Description", "Datu validâcijas kïûda. Ir nepiecieðama manuâla norçíinu aktivizâcija.");
            order.put("ErrorCode", "SOA_164[005]");
            order.put("GroupId", "1");
            order.put("OrderItem", orderItems);
        }

        String res = (new JSONArray().put(order)).toString();

        return res;
    }

    private String GetJsonObjectStringValue(JSONObject data, String jsonfieldName, boolean mandatory) throws Exception {
        String result = "";
        try {
            result = GetJsonObjectValue(data.get(jsonfieldName));
        } catch (Exception e) {
            if (mandatory) {
                throw new Exception("Field: " + jsonfieldName + " is mandatory");
            } else {
                result = "";
            }
        }

        return result;
    }

    private String GetJsonObjectValue(Object objvalue) {
        String valToXml = "";
        if (objvalue instanceof Boolean) {
            Boolean boolToUse = ((Boolean) objvalue).booleanValue();
            valToXml = boolToUse.toString();
        } else if (objvalue instanceof Integer || objvalue instanceof Long) {
            long intToUse = ((Number) objvalue).longValue();
            valToXml = String.valueOf(intToUse);
        } else if (objvalue instanceof Float || objvalue instanceof Double) {
            double floatToUse = ((Number) objvalue).doubleValue();
            valToXml = String.valueOf(floatToUse);
        } else if (JSONObject.NULL.equals(objvalue)) {
            valToXml = "";
        } else {
            valToXml = ((String) objvalue).toString();
        }

        return valToXml;
    }

}
